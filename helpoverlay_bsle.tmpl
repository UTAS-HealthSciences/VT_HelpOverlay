window.plugin = window.plugin || {}; //Gets our plugin container, or sets it if it doesn't exist
window.plugin.helpoverlay = window.plugin.helpoverlay || plugin_helpOverlay(); //Gets our HelpOverlay plugin manager, or attaches it if null

window.help = window.help || {}; //Sets up a shorthand to our particular object.

//Property getting helper function.
function getProp(property, type, pluginID)
{
  if(typeof pluginID !== "string") { pluginID = '{{p.id}}'; }
  if(typeof property !== "string") { console.error("Error in prop: property should be of type string. Type is " + typeof property); }
  if(typeof type !== "string") { console.error("Error in prop: type should be of type string. Type is " + typeof type); }

  var preStr = "ptplugin["+pluginID+"].settings[0].option[";  /* Concat with necessary var */  var endStr = '].value';
  var val = getKrValue(preStr+property+endStr, type);
  return val;
}

var p='{{p.id}}'; //Will return our plugin ID. Used as shorthand for the getProp function calls

var deco = []; //Text decoration container
if(getProp("text_font_underline", "bool", p)) { deco.push('underline'); } //Add underline to our array
if(getProp("text_font_strikethrough", "bool", p)) { deco.push('strikethrough'); } //Add strikethrough to our array

var bc = ktools.Color.hex2rgb(getProp("button_backgroundColor", "string", p)); //Gets our RGB array of colours
bc.push(getProp("button_backgroundAlpha", "float", p)); //Add the alpha to the end of our colour array

window.help = window.plugin.helpoverlay.register(p, { //Register our plugin and set the properties. Gets properties from `helpoverlay.tmpl`
  parent: '#panoDIV',
  id: p,
  button: {
    font: {
      size:       getProp("button_font_size", "int", p)+"px",
      family:     getProp("button_font_family", "string", p),
      decoration: deco.length == 0 ? "normal" : deco.join(' '),
      style:      getProp("button_font_italics", "bool", p) ? "italic" : "normal",
      weight:     getProp("button_font_bold", "bool", p) ? "bold" : "normal",
    },
    background: bc,
    size: {
      x: getProp('button_sizeX', 'int', p),
      y: getProp('button_sizeY', 'int', p),
    },
    position: getProp('button_position','string',p),
    offset: {
      x: getProp('button_offsetX', 'int', p),
      y: getProp('button_offsetY', 'int', p),
    },
    text: getProp('button_text', 'string', p),
    style: {},
  },
  help: {
    hijack: getProp('help_hijack', 'bool', p),
    icon: getProp("help_icon", "string", p),
    onstart: getProp('help_onstart', 'bool', p),
    greeting: getProp('greeting', 'string', p),
  },
});
$(document).trigger('helpoverlay.ready'); //Trigger the notice that the helpoverlay has been registered.
$(document).on('helpoverlay-buttonclicked', function() {
  window.help.display(false); //If the button has been clicked, hide the overlay.
});

$(document).on('pano_helpOpened pano_helpClosed', function(event) {
  window.help.toggleHelp(); //Open or close the help overlay when the Control DBar buttons are clicked.
  $(document).trigger('cA_event', {category: 'Tour Interactions', action: 'click', label: 'View Help', projectEvent: true});
});
